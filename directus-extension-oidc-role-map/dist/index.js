const e=((e,o,r=500)=>class extends Error{name="DirectusError";extensions;code=e.toUpperCase();status=r;constructor(e,r){super("string"==typeof o?o:o(e),r),this.extensions=e}toString(){return`${this.name} [${this.code}]: ${this.message}`}})("FORBIDDEN","You don't have any roles",403);async function o(o,r,t,s){const a=new t.RolesService({schema:await s()});for(const e of Object.keys(r).filter(e=>e.startsWith("groups."))){const t=r[e];if(null!=t){const e=await a.readByQuery({filter:{name:{_eq:t}}},{}),r=e[0]?.id;if(null!=r){const e={...o,role:r};return console.log("Returning role mapping:",e),e}}}throw new e}var r=({filter:e},{services:r,getSchema:t})=>{e("auth.update",async(e,{providerPayload:s},a)=>await o(e,s.userInfo,r,t)),e("auth.create",async(e,s,a)=>(console.log("firing create: ",[e,s,a]),console.log("Provider payload: ",s.providerPayload.userInfo),await o(e,s.providerPayload.userInfo,r,t)))};export{r as default};
